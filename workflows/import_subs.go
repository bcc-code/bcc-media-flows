package workflows

import (
	"fmt"
	"strings"

	vsactivity "github.com/bcc-code/bcc-media-flows/activities/vidispine"
	"github.com/bcc-code/bcc-media-flows/paths"
	wfutils "github.com/bcc-code/bcc-media-flows/utils/workflows"

	"github.com/bcc-code/bcc-media-flows/activities"
	"go.temporal.io/sdk/workflow"
)

type ImportSubtitlesFromSubtransInput struct {
	VXID string
}

func ImportSubtitlesFromSubtrans(
	ctx workflow.Context,
	params ImportSubtitlesFromSubtransInput,
) error {
	logger := workflow.GetLogger(ctx)

	options := wfutils.GetDefaultActivityOptions()
	ctx = workflow.WithActivityOptions(ctx, options)

	logger.Info("Starting sub import flow")

	input := activities.GetSubtransIDInput{
		VXID:     params.VXID,
		NoSubsOK: true,
	}

	subtransIDResponse := &activities.GetSubtransIDOutput{}
	err := wfutils.Execute(ctx, activities.GetSubtransIDActivity, input).Get(ctx, subtransIDResponse)
	if err != nil {
		return err
	}

	outputPath, _ := wfutils.GetWorkflowAuxOutputFolder(ctx)

	subsList := map[string]paths.Path{}
	err = wfutils.Execute(ctx, activities.GetSubtitlesActivity, activities.GetSubtitlesInput{
		SubtransID:        subtransIDResponse.SubtransID,
		Format:            "srt",
		ApprovedOnly:      false,
		DestinationFolder: outputPath,
		//FilePrefix:        "subs_", <-- Generated by subtrans if empty
	}).Get(ctx, &subsList)
	if err != nil {
		return err
	}

	for lang, sub := range subsList {
		lang = strings.ToLower(lang)

		jobRes := &vsactivity.JobResult{}
		err := wfutils.Execute(ctx, vsactivity.ImportFileAsSidecarActivity, vsactivity.ImportSubtitleAsSidecarParams{
			AssetID:  params.VXID,
			Language: lang,
			FilePath: sub,
		}).Get(ctx, jobRes)

		if err != nil {
			return err
		}

		if jobRes.JobID == "" {
			logger.Info("No job created for importing subtitle", "lang", lang, "file", sub)
			continue
		}

		// Unfortunatelly, we need to wait for the job to complete before importing the file as a shape
		// as vidipine goes crazy otherwise
		wfutils.ExecuteWithLowPrioQueue(ctx, vsactivity.WaitForJobCompletion, vsactivity.WaitForJobCompletionParams{
			JobID:     jobRes.JobID,
			SleepTime: 10,
		}).Get(ctx, nil)

		err = wfutils.Execute(ctx, vsactivity.ImportFileAsShapeActivity, vsactivity.ImportFileAsShapeParams{
			AssetID:  params.VXID,
			FilePath: sub,
			ShapeTag: fmt.Sprintf("sub_%s_%s", lang, "srt"),
		}).Get(ctx, jobRes)

		if jobRes.JobID == "" {
			logger.Info("No job created for importing subtitle shape", "lang", lang, "file", sub)
			continue
		}

		wfutils.ExecuteWithLowPrioQueue(ctx, vsactivity.WaitForJobCompletion, vsactivity.WaitForJobCompletionParams{
			JobID:     jobRes.JobID,
			SleepTime: 5,
		}).Get(ctx, nil)
	}

	return nil
}
